"""Main file for the EPS subsystem
"""

from typing import Dict

import numpy as np

from astropy.time import TimeDelta

from digital_twin.spacecraft import SubSystem

# from digital_twin.spacecraft.eps import SolarPanel


# To compute energy generated by the solar panels.
class SolarPanel:
    def __init__(self, params: Dict, init_operating_mode: int) -> None:
        print("Initializing the solar panels...")
        self.operating_mode = init_operating_mode

    def compute_power_generated(self) -> float:
        return 0.0


class Eps(SubSystem):
    def __init__(self, params: Dict, init_operating_mode: int) -> None:
        print("Initializing EPS subsystem... ")

        super(Eps, self).__init__(init_operating_mode)

        self.min_battery = float(params["min_battery"])
        self.max_battery = float(params["max_battery"])
        self.measure_threshold = float(params["measure_threshold"])
        self.com_threshold = float(params["com_threshold"])
        self.xb_threshold = float(params["xb_threshold"])

        # initialize battery level to maximum
        self.battery_level = self.max_battery

        # initialize solar panels
        self.solar_panels = SolarPanel({}, init_operating_mode)

    def update(
        self,
        old_mode: str,
        new_mode: str,
        rv: np.array,
        com_window: bool,
        eclipse_status: bool,
    ) -> None:
        pass

    def compute_power_consumed(self) -> float:
        return 0.0

    def update_batteries(self, power_consumed: float, delta_t: TimeDelta) -> float:
        self.battery_level -= power_consumed

        # Compute power generated by solar panels (multiply by timestep)
        # TODO: need to make sure it is given in sim_unit of time
        power_generated = self.solar_panels.compute_power_generated() * delta_t.value
        self.battery_level += power_generated

    def __str__(self) -> str:
        strings = "\n".join(
            [
                f"- min battery threshold: {self.min_battery}",
                f"- max battery threshold: {self.max_battery}",
                f"- measurement threshold: {self.measure_threshold}",
                f"- communication threshold: {self.com_threshold}",
                f"- x-band threshold: {self.xb_threshold}",
            ]
        )
        return f"EPS: \n{strings}"
