"""Corresponding notebook in the notebooks/ folder
"""
import re
import numpy as np

def get_horizons_csv(file_path):
    """Extract data from file generated by NASA's Horizons database.
    - Data can be accessed at the following link: https://ssd.jpl.nasa.gov/horizons/app.html#/
    - Set "Ephemeris type" to "Vector Table"
    - In "Table settings", check "CSV format"

    Args:
        file_path (str): path to the file containing data

    Returns:
        np.array, np.array: position and velocity arrays
    """
    with open(file_path, 'r') as file:
        data = file.read()  # Read the entire content of the file

    # Split the data into lines
    lines = data.strip().splitlines()

    # Prepare lists for positions and velocities
    positions = []
    velocities = []

    # Initialize variables to track whether we are in the data section
    in_data_section = False

    # Regular expression pattern to capture the required values
    pattern = re.compile(r'([\d.E+-]+),\s*A\.D\.\s*([\d-]+-[A-Za-z]{3}-[\d]+ [\d:]+\.\d+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),\s*([\d.E+-]+),')

    for line in lines:
        # Check for the start of the data section
        if line.strip() == "$$SOE":
            in_data_section = True
            continue  # Skip the line containing $$SOE
        
        # Check for the end of the data section
        if line.strip() == "$$EOE":
            break  # Exit the loop if we reach $$EOE
        
        # Process lines if we are in the data section
        if in_data_section:
            match = pattern.search(line)
            if match:
                # Extract the values and append them to the lists
                x, y, z, vx, vy, vz = map(float, match.groups()[2:8])  # skip the first match group (JD)
                positions.append([x, y, z])
                velocities.append([vx, vy, vz])


    # Convert lists to NumPy arrays for easier manipulation
    positions = np.array(positions)
    velocities = np.array(velocities)

    return positions, velocities